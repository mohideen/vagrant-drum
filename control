#!/bin/bash
#     This shell script takes care of starting and stopping Tomcat
#
#
#
### BEGIN INIT INFO
# Provides: tomcat7
# Default-Start:
# Default-Stop:
# Description:  tomcat start, stop, restart
# Short-Description: start and stop tomcat
### END INIT INFO
 
#. /apps/drum/tomcat/conf/env-config.properties
 
export CATALINA_HOME=/home/vagrant/tomcat
export CATALINA_BASE=`pwd`
siteurl=localhost:8080/jspui/
 
export JAVA_OPTS="$JAVA_OPTS -server -Djava.awt.headless=true -Xmx1024M -Xms1024M -XX:PermSize=256M -XX:MaxPermSize=256M -Dfile.encoding=UTF-8"
 
CATALINA_PID=/home/vagrant/tomcat/catalina.pid
 
# How long (in seconds) to wait between checks for Tomcat shutdown
SHUTDOWN_SLEEP=10
# How many times to check for Tomct shutdown
SHUTDOWN_COUNT=60
 
MAIN_THREAD_POOL_PORT=8080
 
export CATALINA_PID
 
tomcat_pid() {
if [ -e $CATALINA_PID ];
then
echo `cat $CATALINA_PID`
else
echo
fi
}
 
main_thread_pool_status(){
 
local status=`netstat -nlp 2>/dev/null | grep java | grep :$MAIN_THREAD_POOL_PORT | awk '{ print $6 }' | awk -F "/" '{ print $1 }'`
echo "$status"
 
 
}
 
 
 
http_status(){
echo `curl -s -o /dev/null -I -w "%{http_code}" $siteurl`
}
 
isSiteUp(){
response=$(http_status)
if [ "$response" == "200" ];
then
echo "success"
else
echo "failure"
fi
}
 
isMainThreadPoolListen(){
threadStatus=$(main_thread_pool_status)
if [ "$threadStatus" == "LISTEN" ];
then
echo "success"
else
echo "failure"
fi
}
 
 
start() {
    pid=$(tomcat_pid) # get process id of the main tomcat thread
    tomcat_status=$(isMainThreadPoolListen)  # get status of Tomcat connector port
 
    if [[ $tomcat_status == success ]] && [ -n "$pid" ]; # verify that Tomcat has not started yet
        then
            echo "Tomcat is already running (pid: $pid)"
        else
            # Start tomcat
            echo "Starting Tomcat"
            touch $CATALINA_PID
        if [ -e "$CATALINA_PID" ] # verify existence of Catalina pid file
            then
                touch $CATALINA_PID  # Refresh timestamp of Catalina pid file
        fi
 
        $CATALINA_HOME/bin/startup.sh
        echo "Tomcat has started"
    fi
 
    return 0
}
 
stop() {
    pid=$(tomcat_pid)
    tomcat_status=$(isMainThreadPoolListen)  # get status of Tomcat connector port
    if [[ $tomcat_status == success ]] && [ -n "$pid" ]; # verify that Tomcat has started
        then
            $CATALINA_HOME/bin/shutdown.sh > /dev/null 2>&1 # issue shutdown command
            echo -n "Stopping Tomcat"
            echo ""
            let kwait=$SHUTDOWN_COUNT
            count=0;
    until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
    do
        echo -n ".";
        sleep  $SHUTDOWN_SLEEP                        # sleep
        let count=$count+1;
    done
 
    echo ""
 
        if [ $count -gt $kwait ]; then
            echo “process is still running after $SHUTDOWN_COUNT attempts , killing     process”
            kill $pid
        sleep 10                                # sleep 10 seconds
 
            # if Tomcat still running use kill -9
            if [ `ps -p $pid | grep -c $pid` -gt '0' ]; then
                echo “process is still running, using kill -9″
                kill -9 $pid
                sleep 10
            fi
 
        fi
 
        if [ `ps -p $pid | grep -c $pid` -gt '0' ]; then
            echo “Tomcat process is still running, cannot stop Tomcat”
        else
            # success, delete PID file
            if [ -e "$CATALINA_PID" ] # verify existence of Catalina pid file
                then
                echo "Removing catalina.pid file... $CATALINA_PID"
                rm $CATALINA_PID
            fi
 
        fi
   else
   echo "Tomcat is not running"
   fi
 
return 0
}
 
 
server_status(){
    pid=$(tomcat_pid)
    if [ -n "$pid" ]
    then
        echo "Tomcat is running with pid: $pid"
    else
        echo "Tomcat is not running"
    fi
}
 
site_status(){
    status=$(isSiteUp)
    if [ "$status" == "success" ];
    then
        echo "Site $siteurl is up and running"
    else
    echo "Site $siteurl is not responding."
    fi
}
 
 
case $1 in
 
start)
    start
 
    server_status
    validStart=$(isSiteUp)
    startUpWait=600
    counter=0;
 
    if [ "$validStart" != "success" ];
    then
        echo "Waiting for site start up"
    until [ "$validStart" == "success" ] || [ $counter -gt $startUpWait ]
    do
        echo -n ".";
        sleep 1
        validStart=$(isSiteUp)
        let counter=$counter+1;
    done
        echo ""
    fi
 
    site_status
;;
 
 
stop)
    stop
    ;;
 
restart)
    stop
    start
 
    server_status
    validStart=$(isSiteUp)
    startUpWait=600
    counter=0;
    echo "Waiting for site start up"
    until [ "$validStart" == "success" ] || [ $counter -gt $startUpWait ]
    do
        echo -n ".";
        sleep 1
        validStart=$(isSiteUp)
        let counter=$counter+1;
    done
    echo ""
 
site_status
;;
 
 
status)
    server_status
;;
 
sitestatus)
    site_status
;;
 
esac
 
exit 0